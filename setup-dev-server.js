
const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')
const clientConfig = require('@vue/cli-service/webpack.config')

/**
 * 读取文件配置
 * @param {Object} fs
 * @param {string} file
 */
const readFile = (fs, file) => {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {
        console.log('读取文件错误：', e.stack)
    }
}

/// 是否是生产环境
const isProd = process.env.NODE_ENV === 'production'

console.log('生产环境', isProd)

const mfs = new MFS()
// 监听
module.exports = (server, templatePath, cb) => {
    let ready = null
    let template = null
    let bundle
    let clientManifest
    let readyPromise = new Promise((resolve, reject) => { ready = resolve })
  
    const clientHotReload = () => {
        clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
        clientConfig.plugins.push(
            new webpack.HotModuleReplacementPlugin(),
            new webpack.NoEmitOnErrorsPlugin()
        )
        const clientCompiler = webpack(clientConfig)
        const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
            publicPath: clientConfig.output.publicPath,
            noInfo: true
        })
        server.use(devMiddleware)
        server.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))
        clientCompiler.plugin('done', stats => {
            stats = stats.toJson()
            stats.errors.forEach(err => console.error(err))
            stats.warnings.forEach(err => console.warn(err))
            if (stats.errors.length) return
            clientManifest = JSON.parse(readFile(
                devMiddleware.fileSystem,
                'vue-ssr-client-manifest.json'
            ))
            update()
        })
    }

    const serverHotReload = () => {
        // const serverCompiler = webpack(clientConfig)
        // // const devMiddleware = require('webpack-dev-middleware')(serverCompiler, {
        // //     publicPath: clientConfig.output.publicPath,
        // //     noInfo: true
        // // })
        // const mfs = new MFS()
        // serverCompiler.outputFileSystem = mfs
        // serverCompiler.watch({}, (err, stats) => {
        //     if (err) throw err
        //     stats = stats.toJson()
        //     if (stats.errors.length) return
        //     // read bundle generated by vue-ssr-webpack-plugin
        //     // bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
        //     clientManifest = JSON.parse(readFile(
        //         mfs,
        //         'vue-ssr-client-manifest.json'
        //     ))
        //     console.log(clientManifest, bundle)
        //     // update()
        // })

        const serverCompiler = webpack(clientConfig)
      
        serverCompiler.outputFileSystem = mfs
        serverCompiler.watch({}, (error, stats) => {
            if (error) console.log('serverCompiler error', error)
            stats = stats.toJson()
            // bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
            clientManifest = JSON.parse(readFile(
                mfs,
                'vue-ssr-server-bundle.json'
            ))
            console.log(clientManifest)
        })
    }
    const update = () => {
        if (bundle && clientManifest) {
            ready()
            cb(bundle, clientManifest, template)
        }
    }
    // template = fs.readFileSync(templatePath, 'utf-8')
    // chokidar.watch(templatePath).on('change', () => {
    //     template = fs.readFileSync(templatePath, 'utf-8')
    //     console.log('index.html template updated.')
    //     update()
    // })

    // clientHotReload()

    serverHotReload()
    return readyPromise
}
